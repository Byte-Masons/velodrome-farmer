{
    "language": "Solidity",
    "sources": {
        "./contracts/ReaperVeloZap.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\ninterface IPair {\n    function allowance(address, address) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function blockTimestampLast() external view returns (uint256);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function claimFees() external returns (uint256 claimed0, uint256 claimed1);\n\n    function claimable0(address) external view returns (uint256);\n\n    function claimable1(address) external view returns (uint256);\n\n    function current(address tokenIn, uint256 amountIn) external view returns (uint256 amountOut);\n\n    function currentCumulativePrices()\n        external\n        view\n        returns (\n            uint256 reserve0Cumulative,\n            uint256 reserve1Cumulative,\n            uint256 blockTimestamp\n        );\n\n    function decimals() external view returns (uint8);\n\n    function fees() external view returns (address);\n\n    function getAmountOut(uint256 amountIn, address tokenIn) external view returns (uint256);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint256 _reserve0,\n            uint256 _reserve1,\n            uint256 _blockTimestampLast\n        );\n\n    function index0() external view returns (uint256);\n\n    function index1() external view returns (uint256);\n\n    function metadata()\n        external\n        view\n        returns (\n            uint256 dec0,\n            uint256 dec1,\n            uint256 r0,\n            uint256 r1,\n            bool st,\n            address t0,\n            address t1\n        );\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function nonces(address) external view returns (uint256);\n\n    function observationLength() external view returns (uint256);\n\n    function observations(uint256)\n        external\n        view\n        returns (\n            uint256 timestamp,\n            uint256 reserve0Cumulative,\n            uint256 reserve1Cumulative\n        );\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function quote(\n        address tokenIn,\n        uint256 amountIn,\n        uint256 granularity\n    ) external view returns (uint256 amountOut);\n\n    function reserve0() external view returns (uint256);\n\n    function reserve0CumulativeLast() external view returns (uint256);\n\n    function reserve1() external view returns (uint256);\n\n    function reserve1CumulativeLast() external view returns (uint256);\n\n    function skim(address to) external;\n\n    function stable() external view returns (bool);\n\n    function supplyIndex0(address) external view returns (uint256);\n\n    function supplyIndex1(address) external view returns (uint256);\n\n    function sync() external;\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function tokens() external view returns (address, address);\n\n    function totalSupply() external view returns (uint256);\n\n    function transfer(address dst, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amount\n    ) external returns (bool);\n}\n\n// computes square roots using the babylonian method\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\nlibrary Babylonian {\n    // credit for this implementation goes to\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\n    function sqrt(uint256 x) internal pure returns (uint256) {\n        if (x == 0) return 0;\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\n        // however that code costs significantly more gas\n        uint256 xx = x;\n        uint256 r = 1;\n        if (xx >= 0x100000000000000000000000000000000) {\n            xx >>= 128;\n            r <<= 64;\n        }\n        if (xx >= 0x10000000000000000) {\n            xx >>= 64;\n            r <<= 32;\n        }\n        if (xx >= 0x100000000) {\n            xx >>= 32;\n            r <<= 16;\n        }\n        if (xx >= 0x10000) {\n            xx >>= 16;\n            r <<= 8;\n        }\n        if (xx >= 0x100) {\n            xx >>= 8;\n            r <<= 4;\n        }\n        if (xx >= 0x10) {\n            xx >>= 4;\n            r <<= 2;\n        }\n        if (xx >= 0x8) {\n            r <<= 1;\n        }\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1; // Seven iterations should be enough\n        uint256 r1 = x / r;\n        return (r < r1 ? r : r1);\n    }\n}\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\n            value,\n            \"SafeERC20: decreased allowance below zero\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ninterface IVeloRouter {\n    struct route {\n        address from;\n        address to;\n        bool stable;\n    }\n\n    function UNSAFE_swapExactTokensForTokens(\n        uint256[] memory amounts,\n        route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        bool stable,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function factory() external view returns (address);\n\n    function getAmountOut(\n        uint256 amountIn,\n        address tokenIn,\n        address tokenOut\n    ) external view returns (uint256 amount, bool stable);\n\n    function getAmountsOut(uint256 amountIn, route[] memory routes) external view returns (uint256[] memory amounts);\n\n    function getReserves(\n        address tokenA,\n        address tokenB,\n        bool stable\n    ) external view returns (uint256 reserveA, uint256 reserveB);\n\n    function isPair(address pair) external view returns (bool);\n\n    function pairFor(\n        address tokenA,\n        address tokenB,\n        bool stable\n    ) external view returns (address pair);\n\n    function quoteAddLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 amountADesired,\n        uint256 amountBDesired\n    )\n        external\n        view\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function quoteRemoveLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 liquidity\n    ) external view returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        bool stable,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        bool stable,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        bool stable,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        route[] calldata routes,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForTokensSimple(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address tokenFrom,\n        address tokenTo,\n        bool stable,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function weth() external view returns (address);\n}\n\n// @author tess3rac7 for Reaper.Farm\n// @notice This contract adds liquidity to Veldrome liquidity pair pools and stake.\n\ninterface IWETH is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n}\n\ninterface IReaperVaultv1_4 is IERC20 {\n    function deposit(uint256 amount) external;\n\n    function withdraw(uint256 shares) external;\n\n    function token() external pure returns (address);\n}\n\ncontract ReaperVeloZap {\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IReaperVaultv1_4;\n\n    IVeloRouter public immutable router;\n    address public immutable WETH;\n    uint256 public constant minimumAmount = 1000;\n\n    constructor(address _router, address _WETH) {\n        router = IVeloRouter(_router);\n        WETH = _WETH;\n    }\n\n    receive() external payable {\n        assert(msg.sender == WETH);\n    }\n\n    function reapInETH(address reaperVault, uint256 tokenAmountOutMin) external payable {\n        require(msg.value >= minimumAmount, \"Reaper: Insignificant input amount\");\n\n        IWETH(WETH).deposit{value: msg.value}();\n\n        _swapAndStake(reaperVault, tokenAmountOutMin, WETH);\n    }\n\n    function reapIn(\n        address reaperVault,\n        uint256 tokenAmountOutMin,\n        address tokenIn,\n        uint256 tokenInAmount\n    ) external {\n        require(tokenInAmount >= minimumAmount, \"Reaper: Insignificant input amount\");\n        require(\n            IERC20(tokenIn).allowance(msg.sender, address(this)) >= tokenInAmount,\n            \"Reaper: Input token is not approved\"\n        );\n\n        IERC20(tokenIn).safeTransferFrom(msg.sender, address(this), tokenInAmount);\n\n        _swapAndStake(reaperVault, tokenAmountOutMin, tokenIn);\n    }\n\n    function reapOut(address reaperVault, uint256 withdrawAmount) external {\n        (IReaperVaultv1_4 vault, IPair pair) = _getVaultPair(reaperVault);\n\n        IERC20(reaperVault).safeTransferFrom(msg.sender, address(this), withdrawAmount);\n        vault.withdraw(withdrawAmount);\n\n        if (pair.token0() != WETH && pair.token1() != WETH) {\n            return _removeLiquidity(address(pair), msg.sender);\n        }\n\n        _removeLiquidity(address(pair), address(this));\n        _returnAsset(pair.token0());\n        _returnAsset(pair.token1());\n    }\n\n    function reapOutAndSwap(\n        address reaperVault,\n        uint256 withdrawAmount,\n        address desiredToken,\n        uint256 desiredTokenOutMin\n    ) external {\n        (IReaperVaultv1_4 vault, IPair pair) = _getVaultPair(reaperVault);\n        address token0 = pair.token0();\n        address token1 = pair.token1();\n        require(token0 == desiredToken || token1 == desiredToken, \"Reaper: desired token not present in liqudity pair\");\n\n        vault.safeTransferFrom(msg.sender, address(this), withdrawAmount);\n        vault.withdraw(withdrawAmount);\n        _removeLiquidity(address(pair), address(this));\n\n        address swapToken = token1 == desiredToken ? token0 : token1;\n\n        _approveTokenIfNeeded(swapToken, address(router));\n        router.swapExactTokensForTokensSimple(\n            IERC20(swapToken).balanceOf(address(this)),\n            desiredTokenOutMin,\n            swapToken,\n            desiredToken,\n            pair.stable(),\n            address(this),\n            block.timestamp\n        );\n\n        _returnAsset(pair.token0());\n        _returnAsset(pair.token1());\n    }\n\n    function _removeLiquidity(address pair, address to) private {\n        IERC20(pair).safeTransfer(pair, IERC20(pair).balanceOf(address(this)));\n        (uint256 amount0, uint256 amount1) = IPair(pair).burn(to);\n\n        require(amount0 >= minimumAmount, \"UniswapV2Router: INSUFFICIENT_A_AMOUNT\");\n        require(amount1 >= minimumAmount, \"UniswapV2Router: INSUFFICIENT_B_AMOUNT\");\n    }\n\n    function _getVaultPair(address reaperVault) private pure returns (IReaperVaultv1_4 vault, IPair pair) {\n        vault = IReaperVaultv1_4(reaperVault);\n        pair = IPair(vault.token());\n        // Pair's factory is not exposed as a public variable\n        // require(pair.factory() == router.factory(), \"Reaper: Incompatible liquidity pair factory\");\n    }\n\n    function _swapAndStake(\n        address reaperVault,\n        uint256 tokenAmountOutMin,\n        address tokenIn\n    ) private {\n        (IReaperVaultv1_4 vault, IPair pair) = _getVaultPair(reaperVault);\n\n        (uint256 reserveA, uint256 reserveB, ) = pair.getReserves();\n        require(reserveA > minimumAmount && reserveB > minimumAmount, \"Reaper: Liquidity pair reserves too low\");\n\n        bool isInputA = pair.token0() == tokenIn;\n        require(isInputA || pair.token1() == tokenIn, \"Reaper: Input token not present in liqudity pair\");\n\n        uint256 fullInvestment = IERC20(tokenIn).balanceOf(address(this));\n        uint256 amountLiquidity;\n        if (isInputA) {\n            uint256 swapAmountIn = _getSwapAmount(pair, fullInvestment, reserveA, reserveB, pair.token0());\n            _approveTokenIfNeeded(pair.token0(), address(router));\n            uint256[] memory swappedAmounts = router.swapExactTokensForTokensSimple(\n                swapAmountIn,\n                tokenAmountOutMin,\n                pair.token0(),\n                pair.token1(),\n                pair.stable(),\n                address(this),\n                block.timestamp\n            );\n            _approveTokenIfNeeded(pair.token1(), address(router));\n            (, , amountLiquidity) = router.addLiquidity(\n                pair.token0(),\n                pair.token1(),\n                pair.stable(),\n                fullInvestment - swappedAmounts[0],\n                swappedAmounts[1],\n                1,\n                1,\n                address(this),\n                block.timestamp\n            );\n        } else {\n            uint256 swapAmountIn = _getSwapAmount(pair, fullInvestment, reserveB, reserveA, pair.token1());\n            _approveTokenIfNeeded(pair.token1(), address(router));\n            uint256[] memory swappedAmounts = router.swapExactTokensForTokensSimple(\n                swapAmountIn,\n                tokenAmountOutMin,\n                pair.token1(),\n                pair.token0(),\n                pair.stable(),\n                address(this),\n                block.timestamp\n            );\n            _approveTokenIfNeeded(pair.token0(), address(router));\n            (, , amountLiquidity) = router.addLiquidity(\n                pair.token1(),\n                pair.token0(),\n                pair.stable(),\n                fullInvestment - swappedAmounts[0],\n                swappedAmounts[1],\n                1,\n                1,\n                address(this),\n                block.timestamp\n            );\n        }\n\n        _approveTokenIfNeeded(address(pair), address(vault));\n        vault.deposit(amountLiquidity);\n\n        vault.safeTransfer(msg.sender, vault.balanceOf(address(this)));\n        _returnAsset(pair.token0());\n        _returnAsset(pair.token1());\n    }\n\n    function _returnAsset(address token) private {\n        uint256 balance = IERC20(token).balanceOf(address(this));\n        if (balance > 0) {\n            if (token == WETH) {\n                IWETH(WETH).withdraw(balance);\n                (bool success, ) = msg.sender.call{value: balance}(new bytes(0));\n                require(success, \"Reaper: ETH transfer failed\");\n            } else {\n                IERC20(token).safeTransfer(msg.sender, balance);\n            }\n        }\n    }\n\n    function _getSwapAmount(\n        IPair pair,\n        uint256 investmentA,\n        uint256 reserveA,\n        uint256 reserveB,\n        address tokenA\n    ) private view returns (uint256 swapAmount) {\n        uint256 halfInvestment = investmentA / 2;\n        uint256 numerator = pair.getAmountOut(halfInvestment, tokenA);\n        uint256 denominator = quoteLiquidity(halfInvestment, reserveA + halfInvestment, reserveB - numerator);\n        swapAmount = investmentA - Babylonian.sqrt((halfInvestment * halfInvestment * numerator) / denominator);\n    }\n\n    function estimateSwap(\n        address reaperVault,\n        address tokenIn,\n        uint256 fullInvestmentIn\n    )\n        public\n        view\n        returns (\n            uint256 swapAmountIn,\n            uint256 swapAmountOut,\n            address swapTokenOut\n        )\n    {\n        checkWETH();\n        (, IPair pair) = _getVaultPair(reaperVault);\n\n        bool isInputA = pair.token0() == tokenIn;\n        require(isInputA || pair.token1() == tokenIn, \"Reaper: Input token not present in liqudity pair\");\n\n        (uint256 reserveA, uint256 reserveB, ) = pair.getReserves();\n        if (isInputA) {\n            swapAmountIn = _getSwapAmount(pair, fullInvestmentIn, reserveA, reserveB, pair.token0());\n            swapAmountOut = pair.getAmountOut(swapAmountIn, pair.token0());\n            swapTokenOut = pair.token1();\n        } else {\n            swapAmountIn = _getSwapAmount(pair, fullInvestmentIn, reserveB, reserveA, pair.token1());\n            swapAmountOut = pair.getAmountOut(swapAmountIn, pair.token1());\n            swapTokenOut = pair.token0();\n        }\n    }\n\n    function checkWETH() public view returns (bool isValid) {\n        isValid = WETH == router.weth();\n        require(isValid, \"Reaper: WETH address not matching Router.WETH()\");\n    }\n\n    function _approveTokenIfNeeded(address token, address spender) private {\n        if (IERC20(token).allowance(address(this), spender) == 0) {\n            IERC20(token).safeApprove(spender, type(uint256).max);\n        }\n    }\n\n    // Copied from Velodrome's Router since it's an internal function in there\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n    function quoteLiquidity(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) internal pure returns (uint256 amountB) {\n        require(amountA > 0, \"Router: INSUFFICIENT_AMOUNT\");\n        require(reserveA > 0 && reserveB > 0, \"Router: INSUFFICIENT_LIQUIDITY\");\n        amountB = (amountA * reserveB) / reserveA;\n    }\n}\n"
        }
    },
    "settings": {
        "metadata": {
            "useLiteralContent": true
        },
        "optimizer": {
            "enabled": true,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers"
                ],
                "": [
                    "id",
                    "ast"
                ]
            }
        }
    }
}